basePath: /
definitions:
  dto.AdvancedGroupSearchRequest:
    properties:
      accessControlPattern:
        example: 192.168.1.0/24
        type: string
      authMethod:
        enum:
        - ldap
        - local
        example: local
        type: string
      createdAfter:
        description: Date range filters
        example: "2024-01-01T00:00:00Z"
        type: string
      createdBefore:
        example: "2024-12-31T23:59:59Z"
        type: string
      exactMatch:
        example: false
        type: boolean
      groupName:
        description: Basic filters
        example: TEST
        type: string
      hasAccessControl:
        description: Access control filters
        example: true
        type: boolean
      hasMFA:
        example: true
        type: boolean
      hasMembers:
        example: true
        type: boolean
      includeDisabled:
        description: Advanced options
        example: false
        type: boolean
      includeMemberCount:
        example: true
        type: boolean
      isEnabled:
        description: Status filters
        example: true
        type: boolean
      limit:
        example: 25
        maximum: 500
        minimum: 1
        type: integer
      maxMemberCount:
        example: 100
        minimum: 0
        type: integer
      minMemberCount:
        description: Member count filters
        example: 1
        minimum: 0
        type: integer
      page:
        description: Pagination
        example: 1
        minimum: 1
        type: integer
      role:
        enum:
        - Admin
        - User
        example: User
        type: string
      searchText:
        description: Text search
        example: admin
        type: string
      sortBy:
        description: Sorting
        enum:
        - groupName
        - authMethod
        - role
        - memberCount
        - createdAt
        example: groupName
        type: string
      sortOrder:
        enum:
        - asc
        - desc
        example: asc
        type: string
    type: object
  dto.AdvancedGroupSearchResponse:
    properties:
      filters:
        $ref: '#/definitions/dto.AdvancedGroupSearchRequest'
      groups:
        items:
          $ref: '#/definitions/dto.EnhancedGroupResponse'
        type: array
      limit:
        example: 25
        type: integer
      metadata:
        $ref: '#/definitions/dto.GroupSearchMetadata'
      page:
        example: 1
        type: integer
      total:
        example: 25
        type: integer
      totalPages:
        example: 1
        type: integer
    type: object
  dto.AdvancedUserSearchRequest:
    properties:
      accessControlPattern:
        example: 192.168.1.0/24
        type: string
      authMethod:
        enum:
        - ldap
        - local
        example: local
        type: string
      createdAfter:
        description: Date range filters
        example: "2024-01-01T00:00:00Z"
        type: string
      createdBefore:
        example: "2024-12-31T23:59:59Z"
        type: string
      email:
        example: test@example.com
        type: string
      exactMatch:
        example: false
        type: boolean
      expirationAfter:
        example: "2024-01-01T00:00:00Z"
        type: string
      expirationBefore:
        example: "2024-12-31T23:59:59Z"
        type: string
      expiringInDays:
        example: 30
        maximum: 365
        minimum: 0
        type: integer
      groupName:
        example: TEST_GROUP
        type: string
      hasAccessControl:
        description: Access control filters
        example: true
        type: boolean
      hasMFA:
        example: true
        type: boolean
      hasMacAddress:
        description: MAC address filters
        example: true
        type: boolean
      includeDisabled:
        description: Advanced options
        example: false
        type: boolean
      isEnabled:
        description: Status filters
        example: true
        type: boolean
      isExpired:
        description: Expiration filters
        example: false
        type: boolean
      limit:
        example: 25
        maximum: 1000
        minimum: 1
        type: integer
      macAddressPattern:
        example: "00:11:22"
        type: string
      page:
        description: Pagination
        example: 1
        minimum: 1
        type: integer
      role:
        enum:
        - Admin
        - User
        example: User
        type: string
      searchText:
        description: Text search
        example: admin
        type: string
      sortBy:
        description: Sorting
        enum:
        - username
        - email
        - authMethod
        - role
        - groupName
        - userExpiration
        example: username
        type: string
      sortOrder:
        enum:
        - asc
        - desc
        example: asc
        type: string
      username:
        description: Basic filters
        example: testuser
        type: string
    type: object
  dto.AdvancedUserSearchResponse:
    properties:
      filters:
        $ref: '#/definitions/dto.AdvancedUserSearchRequest'
      limit:
        example: 25
        type: integer
      metadata:
        $ref: '#/definitions/dto.UserSearchMetadata'
      page:
        example: 1
        type: integer
      total:
        example: 150
        type: integer
      totalPages:
        example: 6
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.BulkActionResponse:
    properties:
      failed:
        example: 2
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkUserOperationResult'
        type: array
      success:
        example: 8
        type: integer
      total:
        example: 10
        type: integer
    type: object
  dto.BulkCreateGroupsRequest:
    properties:
      groups:
        items:
          $ref: '#/definitions/dto.CreateGroupRequest'
        maxItems: 50
        minItems: 1
        type: array
    required:
    - groups
    type: object
  dto.BulkCreateGroupsResponse:
    properties:
      failed:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkGroupOperationResult'
        type: array
      success:
        example: 4
        type: integer
      total:
        example: 5
        type: integer
    type: object
  dto.BulkCreateUsersRequest:
    properties:
      users:
        items:
          $ref: '#/definitions/dto.CreateUserRequest'
        maxItems: 100
        minItems: 1
        type: array
    required:
    - users
    type: object
  dto.BulkCreateUsersResponse:
    properties:
      failed:
        example: 2
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkUserOperationResult'
        type: array
      success:
        example: 8
        type: integer
      total:
        example: 10
        type: integer
    type: object
  dto.BulkDisconnectUsersRequest:
    properties:
      message:
        example: Maintenance disconnect
        maxLength: 200
        type: string
      usernames:
        example:
        - '["testuser1"'
        - ' "testuser2"]'
        items:
          type: string
        minItems: 1
        type: array
    required:
    - usernames
    type: object
  dto.BulkGroupActionResponse:
    properties:
      failed:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.BulkGroupOperationResult'
        type: array
      success:
        example: 4
        type: integer
      total:
        example: 5
        type: integer
    type: object
  dto.BulkGroupActionsRequest:
    properties:
      action:
        enum:
        - enable
        - disable
        type: string
      groupNames:
        items:
          type: string
        maxItems: 50
        minItems: 1
        type: array
    required:
    - action
    - groupNames
    type: object
  dto.BulkGroupOperationResult:
    properties:
      error:
        example: ""
        type: string
      groupName:
        example: TEST_GROUP
        type: string
      message:
        example: Group created successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.BulkUserActionsRequest:
    properties:
      action:
        enum:
        - enable
        - disable
        - reset-otp
        type: string
      usernames:
        items:
          type: string
        maxItems: 100
        minItems: 1
        type: array
    required:
    - action
    - usernames
    type: object
  dto.BulkUserExtendRequest:
    properties:
      newExpiration:
        type: string
      usernames:
        items:
          type: string
        maxItems: 100
        minItems: 1
        type: array
    required:
    - newExpiration
    - usernames
    type: object
  dto.BulkUserOperationResult:
    properties:
      error:
        example: ""
        type: string
      message:
        example: User created successfully
        type: string
      success:
        example: true
        type: boolean
      username:
        example: testuser
        type: string
    type: object
  dto.ChangePasswordRequest:
    properties:
      password:
        example: NewSecurePass123!
        minLength: 8
        type: string
    required:
    - password
    type: object
  dto.ConnectedUserResponse:
    properties:
      bytes_received:
        example: 1048576
        type: integer
      bytes_sent:
        example: 2097152
        type: integer
      client_id:
        example: "5"
        type: string
      common_name:
        example: user123
        type: string
      connected_since:
        example: "2025-06-14T14:30:25Z"
        type: string
      connected_since_unix:
        example: 1749910225
        type: integer
      connection_duration:
        example: 37m41s
        type: string
      country:
        example: Vietnam
        type: string
      data_channel_cipher:
        example: AES-256-GCM
        type: string
      peer_id:
        example: "12"
        type: string
      real_address:
        example: 203.113.45.123
        type: string
      username:
        example: user123
        type: string
      virtual_address:
        example: 172.27.232.15
        type: string
      virtual_ipv6_address:
        example: ""
        type: string
    type: object
  dto.CreateGroupRequest:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        enum:
        - ldap
        - local
        type: string
      groupName:
        maxLength: 50
        minLength: 3
        type: string
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        enum:
        - User
        - Admin
        type: string
    required:
    - authMethod
    - groupName
    type: object
  dto.CreateUserRequest:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      authMethod:
        enum:
        - ldap
        - local
        example: local
        type: string
      email:
        example: testuser@example.com
        type: string
      groupName:
        example: TEST_GR
        type: string
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      password:
        example: SecurePass123!
        type: string
      userExpiration:
        example: 31/12/2024
        type: string
      username:
        example: testuser
        maxLength: 30
        minLength: 3
        type: string
    required:
    - authMethod
    - email
    - macAddresses
    - userExpiration
    - username
    type: object
  dto.DisconnectResponse:
    properties:
      connection_info:
        $ref: '#/definitions/dto.UserConnectionInfo'
      count:
        example: 2
        type: integer
      disconnected_users:
        example:
        - '["testuser1"'
        - ' "testuser2"]'
        items:
          type: string
        type: array
      message:
        example: Users disconnected successfully
        type: string
      skipped_users:
        example:
        - '["offline_user"]'
        items:
          type: string
        type: array
      success:
        example: true
        type: boolean
      total_requested:
        example: 3
        type: integer
      validation_errors:
        items:
          $ref: '#/definitions/dto.UserValidationError'
        type: array
    type: object
  dto.DisconnectUserRequest:
    properties:
      message:
        example: Session terminated by administrator
        maxLength: 200
        type: string
    type: object
  dto.EnhancedGroupResponse:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        type: string
      createdAt:
        example: "2024-01-15T10:30:00Z"
        type: string
      denyAccess:
        type: boolean
      groupName:
        type: string
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      lastModified:
        example: "2024-03-10T14:22:00Z"
        type: string
      lastUsed:
        example: "2024-06-01T08:15:00Z"
        type: string
      memberCount:
        example: 15
        type: integer
      mfa:
        type: boolean
      role:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        properties:
          code:
            example: BAD_REQUEST
            type: string
          message:
            example: Invalid request format
            type: string
          status:
            example: 400
            type: integer
        type: object
    type: object
  dto.ExpirationStatistics:
    properties:
      expiredCount:
        example: 5
        type: integer
      expiringIn7Days:
        example: 10
        type: integer
      expiringIn30Days:
        example: 25
        type: integer
      expiringIn90Days:
        example: 45
        type: integer
    type: object
  dto.GroupListResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/dto.GroupResponse'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  dto.GroupResponse:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        type: string
      denyAccess:
        type: boolean
      groupName:
        type: string
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        type: string
    type: object
  dto.GroupSearchMetadata:
    properties:
      authMethodStats:
        additionalProperties:
          type: integer
        type: object
      filteredTotal:
        example: 25
        type: integer
      memberCountStats:
        $ref: '#/definitions/dto.MemberCountStatistics'
      roleStats:
        additionalProperties:
          type: integer
        type: object
      searchDuration:
        example: 45ms
        type: string
      unfilteredTotal:
        example: 100
        type: integer
    type: object
  dto.ImportResponse:
    properties:
      dryRun:
        example: false
        type: boolean
      failureCount:
        example: 5
        type: integer
      invalidRecords:
        example: 5
        type: integer
      processedRecords:
        example: 95
        type: integer
      results:
        description: BulkCreateUsersResponse or BulkCreateGroupsResponse
      successCount:
        example: 90
        type: integer
      total:
        example: 100
        type: integer
      validRecords:
        example: 95
        type: integer
      validationErrors:
        items:
          $ref: '#/definitions/dto.ImportValidationError'
        type: array
    type: object
  dto.ImportValidationError:
    properties:
      field:
        example: email
        type: string
      message:
        example: Invalid email format
        type: string
      row:
        example: 3
        type: integer
      value:
        example: invalid-email
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        minLength: 1
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.MemberCountStatistics:
    properties:
      averageSize:
        example: 12.5
        type: number
      emptyGroups:
        example: 3
        type: integer
      largeGroups:
        description: 50+ members
        example: 4
        type: integer
      maxSize:
        example: 75
        type: integer
      mediumGroups:
        description: 11-50 members
        example: 8
        type: integer
      smallGroups:
        description: 1-10 members
        example: 10
        type: integer
    type: object
  dto.MessageResponse:
    properties:
      success:
        properties:
          message:
            example: Operation completed successfully
            type: string
          status:
            example: 200
            type: integer
        type: object
    type: object
  dto.NetworkConfigResponse:
    properties:
      allow_private_nets_to_clients:
        description: Advanced Network Settings
        example: true
        type: boolean
      allow_private_nets6_to_clients:
        example: true
        type: boolean
      client_netmask_bits:
        example: "20"
        type: string
      client_network:
        description: Client Network Settings
        example: 172.27.224.0
        type: string
      group_pool:
        example: 172.27.240.0/20
        type: string
      inter_client:
        example: false
        type: boolean
      listen_ip:
        example: all
        type: string
      message:
        example: Network config retrieved successfully
        type: string
      mss_fix:
        example: "1350"
        type: string
      mtu:
        description: Network Performance
        example: "1420"
        type: string
      nat_enabled:
        description: NAT Settings
        example: true
        type: boolean
      nat_masquerade:
        example: false
        type: boolean
      nat6_enabled:
        example: true
        type: boolean
      nat6_masquerade:
        example: false
        type: boolean
      osi_layer:
        example: "3"
        type: string
      private_access:
        example: "no"
        type: string
      protocol:
        example: tcp
        type: string
      reroute_dns:
        example: true
        type: boolean
      reroute_gateway:
        description: Routing Settings
        example: true
        type: boolean
      server_ip:
        example: all
        type: string
      status:
        description: Status
        example: optimal
        type: string
      tcp_port:
        description: VPN Daemon Settings
        example: "443"
        type: string
      udp_port:
        example: "1194"
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  dto.RefreshTokenResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.SavedSearchRequest:
    properties:
      description:
        example: Users expiring in the next 30 days
        type: string
      filters: {}
      isPublic:
        example: false
        type: boolean
      name:
        example: Expiring Users Next Month
        maxLength: 50
        minLength: 3
        type: string
      searchType:
        enum:
        - users
        - groups
        example: users
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - name
    - searchType
    type: object
  dto.SavedSearchResponse:
    properties:
      createdAt:
        example: "2024-01-15T10:30:00Z"
        type: string
      createdBy:
        example: admin
        type: string
      description:
        example: Users expiring in the next 30 days
        type: string
      filters: {}
      id:
        description: Keep both for compatibility
        example: search_123
        type: string
      isPublic:
        example: false
        type: boolean
      lastUsed:
        example: "2024-06-01T08:15:00Z"
        type: string
      name:
        example: Expiring Users Next Month
        type: string
      searchId:
        example: search_123
        type: string
      searchType:
        example: users
        type: string
      tags:
        items:
          type: string
        type: array
      useCount:
        example: 15
        type: integer
    type: object
  dto.SearchSuggestion:
    properties:
      count:
        example: 1
        type: integer
      description:
        example: 'User: testuser (test@example.com)'
        type: string
      label:
        example: testuser (test@example.com)
        type: string
      matchCount:
        example: 1
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      text:
        example: testuser
        type: string
      type:
        example: username
        type: string
      value:
        example: testuser
        type: string
    type: object
  dto.SearchSuggestionsRequest:
    properties:
      field:
        enum:
        - username
        - email
        - groupName
        example: username
        type: string
      limit:
        example: 10
        maximum: 20
        minimum: 1
        type: integer
      query:
        example: test
        minLength: 1
        type: string
      searchType:
        enum:
        - users
        - groups
        example: users
        type: string
    required:
    - query
    - searchType
    type: object
  dto.SearchSuggestionsResponse:
    properties:
      suggestions:
        items:
          $ref: '#/definitions/dto.SearchSuggestion'
        type: array
      total:
        example: 5
        type: integer
    type: object
  dto.ServerInfoResponse:
    properties:
      admin_ip_address:
        example: all
        type: string
      admin_port:
        example: "943"
        type: string
      client_ip_address:
        example: all
        type: string
      client_port:
        example: "943"
        type: string
      cluster_mode:
        example: "False"
        type: string
      failover_mode:
        example: none
        type: string
      license_server:
        example: licensing.openvpn.net:443
        type: string
      message:
        example: Server info retrieved successfully
        type: string
      node_type:
        example: PRIMARY
        type: string
      status:
        example: healthy
        type: string
      web_server_name:
        example: OpenVPN-AS
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      success:
        properties:
          data: {}
          message:
            example: Operation successful
            type: string
          status:
            example: 200
            type: integer
        type: object
    type: object
  dto.UpdateGroupRequest:
    properties:
      accessControl:
        items:
          type: string
        type: array
      denyAccess:
        type: boolean
      groupRange:
        items:
          type: string
        type: array
      groupSubnet:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        enum:
        - User
        - Admin
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      denyAccess:
        example: false
        type: boolean
      groupName:
        example: TEST_GR
        type: string
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      userExpiration:
        example: 31/12/2025
        type: string
    type: object
  dto.UserConnectionInfo:
    properties:
      connected_since:
        example: "2025-06-14T14:30:25Z"
        type: string
      country:
        example: Vietnam
        type: string
      real_address:
        example: 203.113.45.123
        type: string
      username:
        example: testuser1
        type: string
      virtual_address:
        example: 172.27.232.15
        type: string
    type: object
  dto.UserExpirationInfo:
    properties:
      accessControl:
        items:
          type: string
        type: array
      authMethod:
        type: string
      daysUntilExpiry:
        description: 'NEW: Số ngày còn lại'
        type: integer
      denyAccess:
        type: boolean
      email:
        type: string
      expirationStatus:
        description: 'NEW: "expired", "expiring", "warning"'
        type: string
      groupName:
        type: string
      macAddresses:
        items:
          type: string
        type: array
      mfa:
        type: boolean
      role:
        type: string
      userExpiration:
        type: string
      username:
        type: string
    type: object
  dto.UserExpirationsResponse:
    properties:
      count:
        type: integer
      days:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserExpirationInfo'
        type: array
    type: object
  dto.UserInfo:
    properties:
      email:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  dto.UserListResponse:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 50
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.UserResponse:
    properties:
      accessControl:
        example:
        - 192.168.1.0/24
        items:
          type: string
        type: array
      authMethod:
        example: local
        type: string
      denyAccess:
        example: false
        type: boolean
      email:
        example: testuser@example.com
        type: string
      groupName:
        example: TEST_GR
        type: string
      macAddresses:
        example:
        - 5E:CD:C9:D4:88:65
        items:
          type: string
        type: array
      mfa:
        example: true
        type: boolean
      role:
        example: User
        type: string
      userExpiration:
        example: 31/12/2024
        type: string
      username:
        example: testuser
        type: string
    type: object
  dto.UserSearchMetadata:
    properties:
      authMethodStats:
        additionalProperties:
          type: integer
        type: object
      expirationStats:
        $ref: '#/definitions/dto.ExpirationStatistics'
      filteredTotal:
        example: 150
        type: integer
      groupStats:
        additionalProperties:
          type: integer
        type: object
      roleStats:
        additionalProperties:
          type: integer
        type: object
      searchDuration:
        example: 125ms
        type: string
      unfilteredTotal:
        example: 500
        type: integer
    type: object
  dto.UserValidationError:
    properties:
      error:
        example: User is not currently connected
        type: string
      username:
        example: testuser1
        type: string
    type: object
  dto.VPNStatusResponse:
    properties:
      connected_users:
        items:
          $ref: '#/definitions/dto.ConnectedUserResponse'
        type: array
      timestamp:
        example: "2025-06-14T15:08:06Z"
        type: string
      total_connected_users:
        example: 5
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: OpenVPN Access Server Management API with Bulk Operations and Advanced
    Search
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoVPN API Enhanced
  version: 1.1.0
paths:
  /api/bulk/groups/actions:
    post:
      consumes:
      - application/json
      description: Perform actions on multiple groups (enable/disable)
      parameters:
      - description: Bulk group actions data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkGroupActionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BulkGroupActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk group actions
      tags:
      - Bulk Operations
  /api/bulk/groups/create:
    post:
      consumes:
      - application/json
      description: Create multiple groups at once
      parameters:
      - description: Bulk group creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkCreateGroupsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BulkCreateGroupsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk create groups
      tags:
      - Bulk Operations
  /api/bulk/groups/import:
    post:
      consumes:
      - multipart/form-data
      description: Import groups from CSV, JSON, or XLSX file
      parameters:
      - description: Groups file (CSV/JSON/XLSX)
        in: formData
        name: file
        required: true
        type: file
      - description: File format
        enum:
        - csv
        - json
        - xlsx
        in: formData
        name: format
        type: string
      - description: Dry run mode (validate only)
        in: formData
        name: dryRun
        type: boolean
      - description: Override existing groups
        in: formData
        name: override
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ImportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Import groups from file
      tags:
      - Bulk Operations
  /api/bulk/groups/template:
    get:
      description: Download template file for group import
      parameters:
      - default: csv
        description: Template format
        enum:
        - csv
        - xlsx
        in: query
        name: format
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Group template file
          schema:
            type: file
      security:
      - BearerAuth: []
      summary: Export group template
      tags:
      - Bulk Operations
  /api/bulk/users/actions:
    post:
      consumes:
      - application/json
      description: Perform actions on multiple users (enable/disable/reset-otp)
      parameters:
      - description: Bulk user actions data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkUserActionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BulkActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk user actions
      tags:
      - Bulk Operations
  /api/bulk/users/create:
    post:
      consumes:
      - application/json
      description: Create multiple users at once
      parameters:
      - description: Bulk user creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkCreateUsersRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BulkCreateUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "413":
          description: Request too large
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk create users
      tags:
      - Bulk Operations
  /api/bulk/users/disconnect:
    post:
      consumes:
      - application/json
      description: Disconnect multiple users from VPN with business logic validation
        (user exists and is connected)
      parameters:
      - description: Bulk disconnect users request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkDisconnectUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Users disconnected successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.DisconnectResponse'
              type: object
        "400":
          description: Bad request - validation error or no valid users
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error - failed to disconnect users
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk disconnect multiple VPN users
      tags:
      - Bulk Operations
  /api/bulk/users/extend:
    post:
      consumes:
      - application/json
      description: Extend expiration date for multiple users
      parameters:
      - description: Bulk user extension data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BulkUserExtendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BulkActionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk extend user expiration
      tags:
      - Bulk Operations
  /api/bulk/users/import:
    post:
      consumes:
      - multipart/form-data
      description: Import users from CSV, JSON, or XLSX file
      parameters:
      - description: Users file (CSV/JSON/XLSX)
        in: formData
        name: file
        required: true
        type: file
      - description: File format
        enum:
        - csv
        - json
        - xlsx
        in: formData
        name: format
        type: string
      - description: Dry run mode (validate only)
        in: formData
        name: dryRun
        type: boolean
      - description: Override existing users
        in: formData
        name: override
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ImportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Import users from file
      tags:
      - Bulk Operations
  /api/bulk/users/template:
    get:
      description: Download template file for user import
      parameters:
      - default: csv
        description: Template format
        enum:
        - csv
        - xlsx
        in: query
        name: format
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: User template file
          schema:
            type: file
      security:
      - BearerAuth: []
      summary: Export user template
      tags:
      - Bulk Operations
  /api/config/network:
    get:
      description: Get comprehensive network configuration including client networks,
        VPN daemon settings, routing, and NAT configuration
      produces:
      - application/json
      responses:
        "200":
          description: Network configuration retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.NetworkConfigResponse'
              type: object
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error - failed to retrieve network config
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get network configuration
      tags:
      - Configuration
  /api/config/server/info:
    get:
      description: Get basic server information including node type, ports, and cluster
        configuration
      produces:
      - application/json
      responses:
        "200":
          description: Server information retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ServerInfoResponse'
              type: object
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error - failed to retrieve server info
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get server information
      tags:
      - Configuration
  /api/groups:
    get:
      consumes:
      - application/json
      description: List groups with pagination and filtering
      parameters:
      - in: query
        name: authMethod
        type: string
      - in: query
        name: groupName
        type: string
      - in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GroupListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List groups
      tags:
      - Groups
    post:
      consumes:
      - application/json
      description: Create a new VPN user group
      parameters:
      - description: Group creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new group
      tags:
      - Groups
  /api/groups/{groupName}:
    delete:
      description: Delete group by name
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete group
      tags:
      - Groups
    get:
      description: Get group information by name
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GroupResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get group by name
      tags:
      - Groups
    put:
      consumes:
      - application/json
      description: Update group information
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      - description: Group update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update group
      tags:
      - Groups
  /api/groups/{groupName}/{action}:
    put:
      consumes:
      - application/json
      description: Enable or disable a group
      parameters:
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      - description: Action (enable/disable)
        in: path
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Perform action on group
      tags:
      - Groups
  /api/search/analytics:
    get:
      description: Get analytics about search usage and patterns
      parameters:
      - default: week
        description: Analytics period
        enum:
        - day
        - week
        - month
        in: query
        name: period
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Search analytics data
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get search analytics
      tags:
      - Advanced Search
  /api/search/export:
    post:
      consumes:
      - application/json
      description: Export advanced search results to file
      parameters:
      - default: csv
        description: Export format
        enum:
        - csv
        - xlsx
        - json
        in: query
        name: format
        type: string
      - description: Search criteria for export
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AdvancedUserSearchRequest'
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Exported search results
          schema:
            type: file
      security:
      - BearerAuth: []
      summary: Export search results
      tags:
      - Advanced Search
  /api/search/groups:
    post:
      consumes:
      - application/json
      description: Search groups with complex filters and sorting
      parameters:
      - description: Advanced search criteria
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AdvancedGroupSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AdvancedGroupSearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Advanced group search
      tags:
      - Advanced Search
  /api/search/quick:
    get:
      description: Perform a quick text search across users and groups
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: all
        description: Search type
        enum:
        - users
        - groups
        - all
        in: query
        name: type
        type: string
      - default: 20
        description: Result limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Quick search results
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Quick search
      tags:
      - Advanced Search
  /api/search/saved:
    get:
      description: Get list of saved searches for current user
      parameters:
      - description: Filter by search type
        enum:
        - users
        - groups
        in: query
        name: searchType
        type: string
      - description: Include public saved searches
        in: query
        name: includePublic
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.SavedSearchResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get saved searches
      tags:
      - Advanced Search
    post:
      consumes:
      - application/json
      description: Save frequently used search criteria
      parameters:
      - description: Search to save
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SavedSearchRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SavedSearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Save search query
      tags:
      - Advanced Search
  /api/search/saved/{searchId}:
    delete:
      description: Delete a saved search
      parameters:
      - description: Saved search ID
        in: path
        name: searchId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete saved search
      tags:
      - Advanced Search
  /api/search/saved/{searchId}/execute:
    get:
      description: Execute a previously saved search
      parameters:
      - description: Saved search ID
        in: path
        name: searchId
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Group search results
          schema:
            $ref: '#/definitions/dto.AdvancedGroupSearchResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Execute saved search
      tags:
      - Advanced Search
  /api/search/suggestions:
    post:
      consumes:
      - application/json
      description: Get autocomplete suggestions for search fields
      parameters:
      - description: Search suggestions criteria
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchSuggestionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SearchSuggestionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get search suggestions
      tags:
      - Advanced Search
  /api/search/users:
    post:
      consumes:
      - application/json
      description: Search users with complex filters and sorting
      parameters:
      - description: Advanced search criteria
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AdvancedUserSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AdvancedUserSearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Advanced user search
      tags:
      - Advanced Search
  /api/users:
    get:
      description: Get a paginated list of users with filtering
      parameters:
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by auth method
        enum:
        - ldap
        - local
        in: query
        name: authMethod
        type: string
      - description: Filter by role
        enum:
        - Admin
        - User
        in: query
        name: role
        type: string
      - description: Filter by group name
        in: query
        name: groupName
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new VPN user (local or LDAP authentication)
      parameters:
      - description: User creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /api/users/{username}:
    delete:
      description: Delete a user and associated resources
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Get detailed information about a user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by username
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /api/users/{username}/{action}:
    put:
      consumes:
      - application/json
      description: Perform actions like enable, disable, reset-otp, change-password
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Action
        enum:
        - enable
        - disable
        - reset-otp
        - change-password
        in: path
        name: action
        required: true
        type: string
      - description: Required only for change-password action
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Perform user action
      tags:
      - Users
  /api/users/{username}/disconnect:
    post:
      consumes:
      - application/json
      description: Disconnect a specific user from VPN with business logic validation
        (user exists and is connected)
      parameters:
      - description: Username to disconnect
        in: path
        name: username
        required: true
        type: string
      - description: Disconnect user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DisconnectUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User disconnected successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.DisconnectResponse'
              type: object
        "400":
          description: Bad request - user not found or not connected
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found in system
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error - failed to disconnect user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Disconnect a single VPN user
      tags:
      - Users
  /api/users/expirations:
    get:
      description: Get users that will expire in the specified number of days with
        complete user details
      parameters:
      - default: 7
        description: Number of days to check for expiration
        in: query
        name: days
        type: integer
      - default: false
        description: Include already expired users
        in: query
        name: includeExpired
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserExpirationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get expiring users with full information
      tags:
      - Users
  /api/vpn/status:
    get:
      description: Get detailed VPN server status including all connected users with
        their public IPs, connection times, countries, and traffic statistics
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with VPN status
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.VPNStatusResponse'
              type: object
        "401":
          description: Unauthorized - invalid or missing authentication
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error - failed to retrieve VPN status
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get comprehensive VPN server status
      tags:
      - VPN Status
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/validate:
    get:
      description: Validate the current access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Validate access token
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and RSA256 JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
